/**
 * WebService
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { ChartModel } from '../model/chartModel';
import { KeyValuePairCommunityIListKeyValuePairStringDouble } from '../model/keyValuePairCommunityIListKeyValuePairStringDouble';
import { KeyValuePairConstituencyIListKeyValuePairStringDouble } from '../model/keyValuePairConstituencyIListKeyValuePairStringDouble';
import { KeyValuePairDistrictIListKeyValuePairStringDouble } from '../model/keyValuePairDistrictIListKeyValuePairStringDouble';
import { KeyValuePairFederalLevelIListKeyValuePairStringDouble } from '../model/keyValuePairFederalLevelIListKeyValuePairStringDouble';
import { KeyValuePairProvinceIListKeyValuePairStringDouble } from '../model/keyValuePairProvinceIListKeyValuePairStringDouble';
import { KeyValuePairStringDouble } from '../model/keyValuePairStringDouble';
import { KeyValuePairStringInt32 } from '../model/keyValuePairStringInt32';
import { KeyValuePairStringKeyValuePairStringDouble } from '../model/keyValuePairStringKeyValuePairStringDouble';
import { Result } from '../model/result';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ResultService {

    protected basePath = 'http://localhost:50000';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param electionId 
     * @param communityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public absoluteCommunityResult(electionId: number, communityId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<KeyValuePairStringInt32>>;
    public absoluteCommunityResult(electionId: number, communityId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<KeyValuePairStringInt32>>>;
    public absoluteCommunityResult(electionId: number, communityId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<KeyValuePairStringInt32>>>;
    public absoluteCommunityResult(electionId: number, communityId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionId === null || electionId === undefined) {
            throw new Error('Required parameter electionId was null or undefined when calling absoluteCommunityResult.');
        }
        if (communityId === null || communityId === undefined) {
            throw new Error('Required parameter communityId was null or undefined when calling absoluteCommunityResult.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionId !== undefined) {
            queryParameters = queryParameters.set('electionId', <any>electionId);
        }
        if (communityId !== undefined) {
            queryParameters = queryParameters.set('communityId', <any>communityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<KeyValuePairStringInt32>>(`${this.basePath}/result/absolute/community`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionId 
     * @param constituencyId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public absoluteConstituencyResult(electionId: number, constituencyId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<KeyValuePairStringInt32>>;
    public absoluteConstituencyResult(electionId: number, constituencyId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<KeyValuePairStringInt32>>>;
    public absoluteConstituencyResult(electionId: number, constituencyId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<KeyValuePairStringInt32>>>;
    public absoluteConstituencyResult(electionId: number, constituencyId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionId === null || electionId === undefined) {
            throw new Error('Required parameter electionId was null or undefined when calling absoluteConstituencyResult.');
        }
        if (constituencyId === null || constituencyId === undefined) {
            throw new Error('Required parameter constituencyId was null or undefined when calling absoluteConstituencyResult.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionId !== undefined) {
            queryParameters = queryParameters.set('electionId', <any>electionId);
        }
        if (constituencyId !== undefined) {
            queryParameters = queryParameters.set('constituencyId', <any>constituencyId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<KeyValuePairStringInt32>>(`${this.basePath}/result/absolute/constituency`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionId 
     * @param districtId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public absoluteDistrictResult(electionId: number, districtId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<KeyValuePairStringInt32>>;
    public absoluteDistrictResult(electionId: number, districtId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<KeyValuePairStringInt32>>>;
    public absoluteDistrictResult(electionId: number, districtId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<KeyValuePairStringInt32>>>;
    public absoluteDistrictResult(electionId: number, districtId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionId === null || electionId === undefined) {
            throw new Error('Required parameter electionId was null or undefined when calling absoluteDistrictResult.');
        }
        if (districtId === null || districtId === undefined) {
            throw new Error('Required parameter districtId was null or undefined when calling absoluteDistrictResult.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionId !== undefined) {
            queryParameters = queryParameters.set('electionId', <any>electionId);
        }
        if (districtId !== undefined) {
            queryParameters = queryParameters.set('districtId', <any>districtId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<KeyValuePairStringInt32>>(`${this.basePath}/result/absolute/district`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionId 
     * @param federalLevel 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public absoluteFederalResult(electionId: number, federalLevel: number, observe?: 'body', reportProgress?: boolean): Observable<Array<KeyValuePairStringInt32>>;
    public absoluteFederalResult(electionId: number, federalLevel: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<KeyValuePairStringInt32>>>;
    public absoluteFederalResult(electionId: number, federalLevel: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<KeyValuePairStringInt32>>>;
    public absoluteFederalResult(electionId: number, federalLevel: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionId === null || electionId === undefined) {
            throw new Error('Required parameter electionId was null or undefined when calling absoluteFederalResult.');
        }
        if (federalLevel === null || federalLevel === undefined) {
            throw new Error('Required parameter federalLevel was null or undefined when calling absoluteFederalResult.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionId !== undefined) {
            queryParameters = queryParameters.set('electionId', <any>electionId);
        }
        if (federalLevel !== undefined) {
            queryParameters = queryParameters.set('federalLevel', <any>federalLevel);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<KeyValuePairStringInt32>>(`${this.basePath}/result/absolute/federal`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionId 
     * @param federalLevel 
     * @param provinceId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public absoluteProvinceResult(electionId: number, federalLevel: number, provinceId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<KeyValuePairStringInt32>>;
    public absoluteProvinceResult(electionId: number, federalLevel: number, provinceId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<KeyValuePairStringInt32>>>;
    public absoluteProvinceResult(electionId: number, federalLevel: number, provinceId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<KeyValuePairStringInt32>>>;
    public absoluteProvinceResult(electionId: number, federalLevel: number, provinceId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionId === null || electionId === undefined) {
            throw new Error('Required parameter electionId was null or undefined when calling absoluteProvinceResult.');
        }
        if (federalLevel === null || federalLevel === undefined) {
            throw new Error('Required parameter federalLevel was null or undefined when calling absoluteProvinceResult.');
        }
        if (provinceId === null || provinceId === undefined) {
            throw new Error('Required parameter provinceId was null or undefined when calling absoluteProvinceResult.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionId !== undefined) {
            queryParameters = queryParameters.set('electionId', <any>electionId);
        }
        if (federalLevel !== undefined) {
            queryParameters = queryParameters.set('federalLevel', <any>federalLevel);
        }
        if (provinceId !== undefined) {
            queryParameters = queryParameters.set('provinceId', <any>provinceId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<KeyValuePairStringInt32>>(`${this.basePath}/result/absolute/province`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionId 
     * @param communityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public community(electionId: number, communityId: number, observe?: 'body', reportProgress?: boolean): Observable<Result>;
    public community(electionId: number, communityId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Result>>;
    public community(electionId: number, communityId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Result>>;
    public community(electionId: number, communityId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionId === null || electionId === undefined) {
            throw new Error('Required parameter electionId was null or undefined when calling community.');
        }
        if (communityId === null || communityId === undefined) {
            throw new Error('Required parameter communityId was null or undefined when calling community.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionId !== undefined) {
            queryParameters = queryParameters.set('electionId', <any>electionId);
        }
        if (communityId !== undefined) {
            queryParameters = queryParameters.set('communityId', <any>communityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Result>(`${this.basePath}/result/community`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionIdCurr 
     * @param electionIdPast 
     * @param communityIdCurr 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public communityComparisonToLastElection(electionIdCurr: number, electionIdPast: number, communityIdCurr: number, observe?: 'body', reportProgress?: boolean): Observable<Array<ChartModel>>;
    public communityComparisonToLastElection(electionIdCurr: number, electionIdPast: number, communityIdCurr: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ChartModel>>>;
    public communityComparisonToLastElection(electionIdCurr: number, electionIdPast: number, communityIdCurr: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ChartModel>>>;
    public communityComparisonToLastElection(electionIdCurr: number, electionIdPast: number, communityIdCurr: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionIdCurr === null || electionIdCurr === undefined) {
            throw new Error('Required parameter electionIdCurr was null or undefined when calling communityComparisonToLastElection.');
        }
        if (electionIdPast === null || electionIdPast === undefined) {
            throw new Error('Required parameter electionIdPast was null or undefined when calling communityComparisonToLastElection.');
        }
        if (communityIdCurr === null || communityIdCurr === undefined) {
            throw new Error('Required parameter communityIdCurr was null or undefined when calling communityComparisonToLastElection.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionIdCurr !== undefined) {
            queryParameters = queryParameters.set('electionIdCurr', <any>electionIdCurr);
        }
        if (electionIdPast !== undefined) {
            queryParameters = queryParameters.set('electionIdPast', <any>electionIdPast);
        }
        if (communityIdCurr !== undefined) {
            queryParameters = queryParameters.set('communityIdCurr', <any>communityIdCurr);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<ChartModel>>(`${this.basePath}/result/comparison/community`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionId 
     * @param constituencyId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public constituency(electionId: number, constituencyId: number, observe?: 'body', reportProgress?: boolean): Observable<Result>;
    public constituency(electionId: number, constituencyId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Result>>;
    public constituency(electionId: number, constituencyId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Result>>;
    public constituency(electionId: number, constituencyId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionId === null || electionId === undefined) {
            throw new Error('Required parameter electionId was null or undefined when calling constituency.');
        }
        if (constituencyId === null || constituencyId === undefined) {
            throw new Error('Required parameter constituencyId was null or undefined when calling constituency.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionId !== undefined) {
            queryParameters = queryParameters.set('electionId', <any>electionId);
        }
        if (constituencyId !== undefined) {
            queryParameters = queryParameters.set('constituencyId', <any>constituencyId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Result>(`${this.basePath}/result/constituency`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionIdCurr 
     * @param electionIdPast 
     * @param constituencyIdCurr 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public constituencyComparisonToLastElection(electionIdCurr: number, electionIdPast: number, constituencyIdCurr: number, observe?: 'body', reportProgress?: boolean): Observable<Array<ChartModel>>;
    public constituencyComparisonToLastElection(electionIdCurr: number, electionIdPast: number, constituencyIdCurr: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ChartModel>>>;
    public constituencyComparisonToLastElection(electionIdCurr: number, electionIdPast: number, constituencyIdCurr: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ChartModel>>>;
    public constituencyComparisonToLastElection(electionIdCurr: number, electionIdPast: number, constituencyIdCurr: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionIdCurr === null || electionIdCurr === undefined) {
            throw new Error('Required parameter electionIdCurr was null or undefined when calling constituencyComparisonToLastElection.');
        }
        if (electionIdPast === null || electionIdPast === undefined) {
            throw new Error('Required parameter electionIdPast was null or undefined when calling constituencyComparisonToLastElection.');
        }
        if (constituencyIdCurr === null || constituencyIdCurr === undefined) {
            throw new Error('Required parameter constituencyIdCurr was null or undefined when calling constituencyComparisonToLastElection.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionIdCurr !== undefined) {
            queryParameters = queryParameters.set('electionIdCurr', <any>electionIdCurr);
        }
        if (electionIdPast !== undefined) {
            queryParameters = queryParameters.set('electionIdPast', <any>electionIdPast);
        }
        if (constituencyIdCurr !== undefined) {
            queryParameters = queryParameters.set('constituencyIdCurr', <any>constituencyIdCurr);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<ChartModel>>(`${this.basePath}/result/comparison/constituency`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionId 
     * @param districtId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public district(electionId: number, districtId: number, observe?: 'body', reportProgress?: boolean): Observable<Result>;
    public district(electionId: number, districtId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Result>>;
    public district(electionId: number, districtId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Result>>;
    public district(electionId: number, districtId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionId === null || electionId === undefined) {
            throw new Error('Required parameter electionId was null or undefined when calling district.');
        }
        if (districtId === null || districtId === undefined) {
            throw new Error('Required parameter districtId was null or undefined when calling district.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionId !== undefined) {
            queryParameters = queryParameters.set('electionId', <any>electionId);
        }
        if (districtId !== undefined) {
            queryParameters = queryParameters.set('districtId', <any>districtId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Result>(`${this.basePath}/result/district`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionIdCurr 
     * @param electionIdPast 
     * @param districtIdCurr 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public districtComparisonToLastElection(electionIdCurr: number, electionIdPast: number, districtIdCurr: number, observe?: 'body', reportProgress?: boolean): Observable<Array<ChartModel>>;
    public districtComparisonToLastElection(electionIdCurr: number, electionIdPast: number, districtIdCurr: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ChartModel>>>;
    public districtComparisonToLastElection(electionIdCurr: number, electionIdPast: number, districtIdCurr: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ChartModel>>>;
    public districtComparisonToLastElection(electionIdCurr: number, electionIdPast: number, districtIdCurr: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionIdCurr === null || electionIdCurr === undefined) {
            throw new Error('Required parameter electionIdCurr was null or undefined when calling districtComparisonToLastElection.');
        }
        if (electionIdPast === null || electionIdPast === undefined) {
            throw new Error('Required parameter electionIdPast was null or undefined when calling districtComparisonToLastElection.');
        }
        if (districtIdCurr === null || districtIdCurr === undefined) {
            throw new Error('Required parameter districtIdCurr was null or undefined when calling districtComparisonToLastElection.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionIdCurr !== undefined) {
            queryParameters = queryParameters.set('electionIdCurr', <any>electionIdCurr);
        }
        if (electionIdPast !== undefined) {
            queryParameters = queryParameters.set('electionIdPast', <any>electionIdPast);
        }
        if (districtIdCurr !== undefined) {
            queryParameters = queryParameters.set('districtIdCurr', <any>districtIdCurr);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<ChartModel>>(`${this.basePath}/result/comparison/district`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionId 
     * @param federalId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public federal(electionId: number, federalId: number, observe?: 'body', reportProgress?: boolean): Observable<Result>;
    public federal(electionId: number, federalId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Result>>;
    public federal(electionId: number, federalId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Result>>;
    public federal(electionId: number, federalId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionId === null || electionId === undefined) {
            throw new Error('Required parameter electionId was null or undefined when calling federal.');
        }
        if (federalId === null || federalId === undefined) {
            throw new Error('Required parameter federalId was null or undefined when calling federal.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionId !== undefined) {
            queryParameters = queryParameters.set('electionId', <any>electionId);
        }
        if (federalId !== undefined) {
            queryParameters = queryParameters.set('federalId', <any>federalId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Result>(`${this.basePath}/result/federal`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionIdCurr 
     * @param electionIdPast 
     * @param federalCurr 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public federalComparisonToElection(electionIdCurr: number, electionIdPast: number, federalCurr: number, observe?: 'body', reportProgress?: boolean): Observable<Array<ChartModel>>;
    public federalComparisonToElection(electionIdCurr: number, electionIdPast: number, federalCurr: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ChartModel>>>;
    public federalComparisonToElection(electionIdCurr: number, electionIdPast: number, federalCurr: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ChartModel>>>;
    public federalComparisonToElection(electionIdCurr: number, electionIdPast: number, federalCurr: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionIdCurr === null || electionIdCurr === undefined) {
            throw new Error('Required parameter electionIdCurr was null or undefined when calling federalComparisonToElection.');
        }
        if (electionIdPast === null || electionIdPast === undefined) {
            throw new Error('Required parameter electionIdPast was null or undefined when calling federalComparisonToElection.');
        }
        if (federalCurr === null || federalCurr === undefined) {
            throw new Error('Required parameter federalCurr was null or undefined when calling federalComparisonToElection.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionIdCurr !== undefined) {
            queryParameters = queryParameters.set('electionIdCurr', <any>electionIdCurr);
        }
        if (electionIdPast !== undefined) {
            queryParameters = queryParameters.set('electionIdPast', <any>electionIdPast);
        }
        if (federalCurr !== undefined) {
            queryParameters = queryParameters.set('federalCurr', <any>federalCurr);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<ChartModel>>(`${this.basePath}/result/comparison/federal`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionId 
     * @param provinceId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public province(electionId: number, provinceId: number, observe?: 'body', reportProgress?: boolean): Observable<Result>;
    public province(electionId: number, provinceId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Result>>;
    public province(electionId: number, provinceId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Result>>;
    public province(electionId: number, provinceId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionId === null || electionId === undefined) {
            throw new Error('Required parameter electionId was null or undefined when calling province.');
        }
        if (provinceId === null || provinceId === undefined) {
            throw new Error('Required parameter provinceId was null or undefined when calling province.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionId !== undefined) {
            queryParameters = queryParameters.set('electionId', <any>electionId);
        }
        if (provinceId !== undefined) {
            queryParameters = queryParameters.set('provinceId', <any>provinceId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Result>(`${this.basePath}/result/province`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionIdCurr 
     * @param electionIdPast 
     * @param federalCurr 
     * @param federalPast 
     * @param provinceIdCurr 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public provinceComparisonToLastElection(electionIdCurr: number, electionIdPast: number, federalCurr: number, federalPast: number, provinceIdCurr: number, observe?: 'body', reportProgress?: boolean): Observable<Array<ChartModel>>;
    public provinceComparisonToLastElection(electionIdCurr: number, electionIdPast: number, federalCurr: number, federalPast: number, provinceIdCurr: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ChartModel>>>;
    public provinceComparisonToLastElection(electionIdCurr: number, electionIdPast: number, federalCurr: number, federalPast: number, provinceIdCurr: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ChartModel>>>;
    public provinceComparisonToLastElection(electionIdCurr: number, electionIdPast: number, federalCurr: number, federalPast: number, provinceIdCurr: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionIdCurr === null || electionIdCurr === undefined) {
            throw new Error('Required parameter electionIdCurr was null or undefined when calling provinceComparisonToLastElection.');
        }
        if (electionIdPast === null || electionIdPast === undefined) {
            throw new Error('Required parameter electionIdPast was null or undefined when calling provinceComparisonToLastElection.');
        }
        if (federalCurr === null || federalCurr === undefined) {
            throw new Error('Required parameter federalCurr was null or undefined when calling provinceComparisonToLastElection.');
        }
        if (federalPast === null || federalPast === undefined) {
            throw new Error('Required parameter federalPast was null or undefined when calling provinceComparisonToLastElection.');
        }
        if (provinceIdCurr === null || provinceIdCurr === undefined) {
            throw new Error('Required parameter provinceIdCurr was null or undefined when calling provinceComparisonToLastElection.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionIdCurr !== undefined) {
            queryParameters = queryParameters.set('electionIdCurr', <any>electionIdCurr);
        }
        if (electionIdPast !== undefined) {
            queryParameters = queryParameters.set('electionIdPast', <any>electionIdPast);
        }
        if (federalCurr !== undefined) {
            queryParameters = queryParameters.set('federalCurr', <any>federalCurr);
        }
        if (federalPast !== undefined) {
            queryParameters = queryParameters.set('federalPast', <any>federalPast);
        }
        if (provinceIdCurr !== undefined) {
            queryParameters = queryParameters.set('provinceIdCurr', <any>provinceIdCurr);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<ChartModel>>(`${this.basePath}/result/comparison/province`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionId 
     * @param federalLevel 
     * @param communityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public relativeCommunityResult(electionId: number, federalLevel: number, communityId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<KeyValuePairStringDouble>>;
    public relativeCommunityResult(electionId: number, federalLevel: number, communityId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<KeyValuePairStringDouble>>>;
    public relativeCommunityResult(electionId: number, federalLevel: number, communityId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<KeyValuePairStringDouble>>>;
    public relativeCommunityResult(electionId: number, federalLevel: number, communityId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionId === null || electionId === undefined) {
            throw new Error('Required parameter electionId was null or undefined when calling relativeCommunityResult.');
        }
        if (federalLevel === null || federalLevel === undefined) {
            throw new Error('Required parameter federalLevel was null or undefined when calling relativeCommunityResult.');
        }
        if (communityId === null || communityId === undefined) {
            throw new Error('Required parameter communityId was null or undefined when calling relativeCommunityResult.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionId !== undefined) {
            queryParameters = queryParameters.set('electionId', <any>electionId);
        }
        if (federalLevel !== undefined) {
            queryParameters = queryParameters.set('federalLevel', <any>federalLevel);
        }
        if (communityId !== undefined) {
            queryParameters = queryParameters.set('communityId', <any>communityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<KeyValuePairStringDouble>>(`${this.basePath}/result/relative/community`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionId 
     * @param communityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public relativeCommunityResultWithColor(electionId: number, communityId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<KeyValuePairStringKeyValuePairStringDouble>>;
    public relativeCommunityResultWithColor(electionId: number, communityId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<KeyValuePairStringKeyValuePairStringDouble>>>;
    public relativeCommunityResultWithColor(electionId: number, communityId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<KeyValuePairStringKeyValuePairStringDouble>>>;
    public relativeCommunityResultWithColor(electionId: number, communityId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionId === null || electionId === undefined) {
            throw new Error('Required parameter electionId was null or undefined when calling relativeCommunityResultWithColor.');
        }
        if (communityId === null || communityId === undefined) {
            throw new Error('Required parameter communityId was null or undefined when calling relativeCommunityResultWithColor.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionId !== undefined) {
            queryParameters = queryParameters.set('electionId', <any>electionId);
        }
        if (communityId !== undefined) {
            queryParameters = queryParameters.set('communityId', <any>communityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<KeyValuePairStringKeyValuePairStringDouble>>(`${this.basePath}/result/relative/community/color`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionId 
     * @param federalLevel 
     * @param constituencyId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public relativeConstituencyResult(electionId: number, federalLevel: number, constituencyId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<KeyValuePairStringDouble>>;
    public relativeConstituencyResult(electionId: number, federalLevel: number, constituencyId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<KeyValuePairStringDouble>>>;
    public relativeConstituencyResult(electionId: number, federalLevel: number, constituencyId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<KeyValuePairStringDouble>>>;
    public relativeConstituencyResult(electionId: number, federalLevel: number, constituencyId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionId === null || electionId === undefined) {
            throw new Error('Required parameter electionId was null or undefined when calling relativeConstituencyResult.');
        }
        if (federalLevel === null || federalLevel === undefined) {
            throw new Error('Required parameter federalLevel was null or undefined when calling relativeConstituencyResult.');
        }
        if (constituencyId === null || constituencyId === undefined) {
            throw new Error('Required parameter constituencyId was null or undefined when calling relativeConstituencyResult.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionId !== undefined) {
            queryParameters = queryParameters.set('electionId', <any>electionId);
        }
        if (federalLevel !== undefined) {
            queryParameters = queryParameters.set('federalLevel', <any>federalLevel);
        }
        if (constituencyId !== undefined) {
            queryParameters = queryParameters.set('constituencyId', <any>constituencyId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<KeyValuePairStringDouble>>(`${this.basePath}/result/relative/constituency`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionId 
     * @param constituencyId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public relativeConstituencyResultWithColor(electionId: number, constituencyId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<KeyValuePairStringKeyValuePairStringDouble>>;
    public relativeConstituencyResultWithColor(electionId: number, constituencyId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<KeyValuePairStringKeyValuePairStringDouble>>>;
    public relativeConstituencyResultWithColor(electionId: number, constituencyId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<KeyValuePairStringKeyValuePairStringDouble>>>;
    public relativeConstituencyResultWithColor(electionId: number, constituencyId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionId === null || electionId === undefined) {
            throw new Error('Required parameter electionId was null or undefined when calling relativeConstituencyResultWithColor.');
        }
        if (constituencyId === null || constituencyId === undefined) {
            throw new Error('Required parameter constituencyId was null or undefined when calling relativeConstituencyResultWithColor.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionId !== undefined) {
            queryParameters = queryParameters.set('electionId', <any>electionId);
        }
        if (constituencyId !== undefined) {
            queryParameters = queryParameters.set('constituencyId', <any>constituencyId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<KeyValuePairStringKeyValuePairStringDouble>>(`${this.basePath}/result/relative/constituency/color`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionId 
     * @param federalLevel 
     * @param districtId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public relativeDistrictResult(electionId: number, federalLevel: number, districtId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<KeyValuePairStringDouble>>;
    public relativeDistrictResult(electionId: number, federalLevel: number, districtId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<KeyValuePairStringDouble>>>;
    public relativeDistrictResult(electionId: number, federalLevel: number, districtId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<KeyValuePairStringDouble>>>;
    public relativeDistrictResult(electionId: number, federalLevel: number, districtId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionId === null || electionId === undefined) {
            throw new Error('Required parameter electionId was null or undefined when calling relativeDistrictResult.');
        }
        if (federalLevel === null || federalLevel === undefined) {
            throw new Error('Required parameter federalLevel was null or undefined when calling relativeDistrictResult.');
        }
        if (districtId === null || districtId === undefined) {
            throw new Error('Required parameter districtId was null or undefined when calling relativeDistrictResult.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionId !== undefined) {
            queryParameters = queryParameters.set('electionId', <any>electionId);
        }
        if (federalLevel !== undefined) {
            queryParameters = queryParameters.set('federalLevel', <any>federalLevel);
        }
        if (districtId !== undefined) {
            queryParameters = queryParameters.set('districtId', <any>districtId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<KeyValuePairStringDouble>>(`${this.basePath}/result/relative/district`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionId 
     * @param districtId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public relativeDistrictResultWithColor(electionId: number, districtId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<KeyValuePairStringKeyValuePairStringDouble>>;
    public relativeDistrictResultWithColor(electionId: number, districtId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<KeyValuePairStringKeyValuePairStringDouble>>>;
    public relativeDistrictResultWithColor(electionId: number, districtId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<KeyValuePairStringKeyValuePairStringDouble>>>;
    public relativeDistrictResultWithColor(electionId: number, districtId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionId === null || electionId === undefined) {
            throw new Error('Required parameter electionId was null or undefined when calling relativeDistrictResultWithColor.');
        }
        if (districtId === null || districtId === undefined) {
            throw new Error('Required parameter districtId was null or undefined when calling relativeDistrictResultWithColor.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionId !== undefined) {
            queryParameters = queryParameters.set('electionId', <any>electionId);
        }
        if (districtId !== undefined) {
            queryParameters = queryParameters.set('districtId', <any>districtId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<KeyValuePairStringKeyValuePairStringDouble>>(`${this.basePath}/result/relative/district/color`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionId 
     * @param federalLevel 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public relativeFederalResult(electionId: number, federalLevel: number, observe?: 'body', reportProgress?: boolean): Observable<Array<KeyValuePairStringDouble>>;
    public relativeFederalResult(electionId: number, federalLevel: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<KeyValuePairStringDouble>>>;
    public relativeFederalResult(electionId: number, federalLevel: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<KeyValuePairStringDouble>>>;
    public relativeFederalResult(electionId: number, federalLevel: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionId === null || electionId === undefined) {
            throw new Error('Required parameter electionId was null or undefined when calling relativeFederalResult.');
        }
        if (federalLevel === null || federalLevel === undefined) {
            throw new Error('Required parameter federalLevel was null or undefined when calling relativeFederalResult.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionId !== undefined) {
            queryParameters = queryParameters.set('electionId', <any>electionId);
        }
        if (federalLevel !== undefined) {
            queryParameters = queryParameters.set('federalLevel', <any>federalLevel);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<KeyValuePairStringDouble>>(`${this.basePath}/result/relative/federal`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionId 
     * @param federalLevel 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public relativeFederalResultWithColor(electionId: number, federalLevel: number, observe?: 'body', reportProgress?: boolean): Observable<Array<KeyValuePairStringKeyValuePairStringDouble>>;
    public relativeFederalResultWithColor(electionId: number, federalLevel: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<KeyValuePairStringKeyValuePairStringDouble>>>;
    public relativeFederalResultWithColor(electionId: number, federalLevel: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<KeyValuePairStringKeyValuePairStringDouble>>>;
    public relativeFederalResultWithColor(electionId: number, federalLevel: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionId === null || electionId === undefined) {
            throw new Error('Required parameter electionId was null or undefined when calling relativeFederalResultWithColor.');
        }
        if (federalLevel === null || federalLevel === undefined) {
            throw new Error('Required parameter federalLevel was null or undefined when calling relativeFederalResultWithColor.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionId !== undefined) {
            queryParameters = queryParameters.set('electionId', <any>electionId);
        }
        if (federalLevel !== undefined) {
            queryParameters = queryParameters.set('federalLevel', <any>federalLevel);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<KeyValuePairStringKeyValuePairStringDouble>>(`${this.basePath}/result/relative/federal/color`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionId 
     * @param federalLevel 
     * @param provinceId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public relativeProvinceResult(electionId: number, federalLevel: number, provinceId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<KeyValuePairStringDouble>>;
    public relativeProvinceResult(electionId: number, federalLevel: number, provinceId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<KeyValuePairStringDouble>>>;
    public relativeProvinceResult(electionId: number, federalLevel: number, provinceId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<KeyValuePairStringDouble>>>;
    public relativeProvinceResult(electionId: number, federalLevel: number, provinceId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionId === null || electionId === undefined) {
            throw new Error('Required parameter electionId was null or undefined when calling relativeProvinceResult.');
        }
        if (federalLevel === null || federalLevel === undefined) {
            throw new Error('Required parameter federalLevel was null or undefined when calling relativeProvinceResult.');
        }
        if (provinceId === null || provinceId === undefined) {
            throw new Error('Required parameter provinceId was null or undefined when calling relativeProvinceResult.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionId !== undefined) {
            queryParameters = queryParameters.set('electionId', <any>electionId);
        }
        if (federalLevel !== undefined) {
            queryParameters = queryParameters.set('federalLevel', <any>federalLevel);
        }
        if (provinceId !== undefined) {
            queryParameters = queryParameters.set('provinceId', <any>provinceId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<KeyValuePairStringDouble>>(`${this.basePath}/result/relative/province`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionId 
     * @param federalLevel 
     * @param provinceId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public relativeProvinceResultWithColor(electionId: number, federalLevel: number, provinceId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<KeyValuePairStringKeyValuePairStringDouble>>;
    public relativeProvinceResultWithColor(electionId: number, federalLevel: number, provinceId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<KeyValuePairStringKeyValuePairStringDouble>>>;
    public relativeProvinceResultWithColor(electionId: number, federalLevel: number, provinceId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<KeyValuePairStringKeyValuePairStringDouble>>>;
    public relativeProvinceResultWithColor(electionId: number, federalLevel: number, provinceId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionId === null || electionId === undefined) {
            throw new Error('Required parameter electionId was null or undefined when calling relativeProvinceResultWithColor.');
        }
        if (federalLevel === null || federalLevel === undefined) {
            throw new Error('Required parameter federalLevel was null or undefined when calling relativeProvinceResultWithColor.');
        }
        if (provinceId === null || provinceId === undefined) {
            throw new Error('Required parameter provinceId was null or undefined when calling relativeProvinceResultWithColor.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionId !== undefined) {
            queryParameters = queryParameters.set('electionId', <any>electionId);
        }
        if (federalLevel !== undefined) {
            queryParameters = queryParameters.set('federalLevel', <any>federalLevel);
        }
        if (provinceId !== undefined) {
            queryParameters = queryParameters.set('provinceId', <any>provinceId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<KeyValuePairStringKeyValuePairStringDouble>>(`${this.basePath}/result/relative/province/color`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionId 
     * @param searchTerm 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchCommunityResult(electionId: number, searchTerm: string, observe?: 'body', reportProgress?: boolean): Observable<Array<KeyValuePairCommunityIListKeyValuePairStringDouble>>;
    public searchCommunityResult(electionId: number, searchTerm: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<KeyValuePairCommunityIListKeyValuePairStringDouble>>>;
    public searchCommunityResult(electionId: number, searchTerm: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<KeyValuePairCommunityIListKeyValuePairStringDouble>>>;
    public searchCommunityResult(electionId: number, searchTerm: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionId === null || electionId === undefined) {
            throw new Error('Required parameter electionId was null or undefined when calling searchCommunityResult.');
        }
        if (searchTerm === null || searchTerm === undefined) {
            throw new Error('Required parameter searchTerm was null or undefined when calling searchCommunityResult.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionId !== undefined) {
            queryParameters = queryParameters.set('electionId', <any>electionId);
        }
        if (searchTerm !== undefined) {
            queryParameters = queryParameters.set('searchTerm', <any>searchTerm);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<KeyValuePairCommunityIListKeyValuePairStringDouble>>(`${this.basePath}/result/search/community`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionId 
     * @param searchTerm 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchConsittuencyResult(electionId: number, searchTerm: string, observe?: 'body', reportProgress?: boolean): Observable<Array<KeyValuePairConstituencyIListKeyValuePairStringDouble>>;
    public searchConsittuencyResult(electionId: number, searchTerm: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<KeyValuePairConstituencyIListKeyValuePairStringDouble>>>;
    public searchConsittuencyResult(electionId: number, searchTerm: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<KeyValuePairConstituencyIListKeyValuePairStringDouble>>>;
    public searchConsittuencyResult(electionId: number, searchTerm: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionId === null || electionId === undefined) {
            throw new Error('Required parameter electionId was null or undefined when calling searchConsittuencyResult.');
        }
        if (searchTerm === null || searchTerm === undefined) {
            throw new Error('Required parameter searchTerm was null or undefined when calling searchConsittuencyResult.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionId !== undefined) {
            queryParameters = queryParameters.set('electionId', <any>electionId);
        }
        if (searchTerm !== undefined) {
            queryParameters = queryParameters.set('searchTerm', <any>searchTerm);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<KeyValuePairConstituencyIListKeyValuePairStringDouble>>(`${this.basePath}/result/search/constituency`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionId 
     * @param searchTerm 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchDistrictResult(electionId: number, searchTerm: string, observe?: 'body', reportProgress?: boolean): Observable<Array<KeyValuePairDistrictIListKeyValuePairStringDouble>>;
    public searchDistrictResult(electionId: number, searchTerm: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<KeyValuePairDistrictIListKeyValuePairStringDouble>>>;
    public searchDistrictResult(electionId: number, searchTerm: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<KeyValuePairDistrictIListKeyValuePairStringDouble>>>;
    public searchDistrictResult(electionId: number, searchTerm: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionId === null || electionId === undefined) {
            throw new Error('Required parameter electionId was null or undefined when calling searchDistrictResult.');
        }
        if (searchTerm === null || searchTerm === undefined) {
            throw new Error('Required parameter searchTerm was null or undefined when calling searchDistrictResult.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionId !== undefined) {
            queryParameters = queryParameters.set('electionId', <any>electionId);
        }
        if (searchTerm !== undefined) {
            queryParameters = queryParameters.set('searchTerm', <any>searchTerm);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<KeyValuePairDistrictIListKeyValuePairStringDouble>>(`${this.basePath}/result/search/district`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionId 
     * @param searchTerm 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchFederalResult(electionId: number, searchTerm: string, observe?: 'body', reportProgress?: boolean): Observable<Array<KeyValuePairFederalLevelIListKeyValuePairStringDouble>>;
    public searchFederalResult(electionId: number, searchTerm: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<KeyValuePairFederalLevelIListKeyValuePairStringDouble>>>;
    public searchFederalResult(electionId: number, searchTerm: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<KeyValuePairFederalLevelIListKeyValuePairStringDouble>>>;
    public searchFederalResult(electionId: number, searchTerm: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionId === null || electionId === undefined) {
            throw new Error('Required parameter electionId was null or undefined when calling searchFederalResult.');
        }
        if (searchTerm === null || searchTerm === undefined) {
            throw new Error('Required parameter searchTerm was null or undefined when calling searchFederalResult.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionId !== undefined) {
            queryParameters = queryParameters.set('electionId', <any>electionId);
        }
        if (searchTerm !== undefined) {
            queryParameters = queryParameters.set('searchTerm', <any>searchTerm);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<KeyValuePairFederalLevelIListKeyValuePairStringDouble>>(`${this.basePath}/result/search/federal`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionId 
     * @param searchTerm 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchProvinceResult(electionId: number, searchTerm: string, observe?: 'body', reportProgress?: boolean): Observable<Array<KeyValuePairProvinceIListKeyValuePairStringDouble>>;
    public searchProvinceResult(electionId: number, searchTerm: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<KeyValuePairProvinceIListKeyValuePairStringDouble>>>;
    public searchProvinceResult(electionId: number, searchTerm: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<KeyValuePairProvinceIListKeyValuePairStringDouble>>>;
    public searchProvinceResult(electionId: number, searchTerm: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionId === null || electionId === undefined) {
            throw new Error('Required parameter electionId was null or undefined when calling searchProvinceResult.');
        }
        if (searchTerm === null || searchTerm === undefined) {
            throw new Error('Required parameter searchTerm was null or undefined when calling searchProvinceResult.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionId !== undefined) {
            queryParameters = queryParameters.set('electionId', <any>electionId);
        }
        if (searchTerm !== undefined) {
            queryParameters = queryParameters.set('searchTerm', <any>searchTerm);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<KeyValuePairProvinceIListKeyValuePairStringDouble>>(`${this.basePath}/result/search/province`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
