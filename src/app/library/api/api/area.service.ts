/**
 * WebService
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { Community } from '../model/community';
import { Constituency } from '../model/constituency';
import { District } from '../model/district';
import { FederalLevel } from '../model/federalLevel';
import { Province } from '../model/province';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class AreaService {

    protected basePath = 'http://localhost:50000';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public community(id: number, observe?: 'body', reportProgress?: boolean): Observable<Community>;
    public community(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Community>>;
    public community(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Community>>;
    public community(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling community.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Community>(`${this.basePath}/area/community`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionId 
     * @param areaId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public communityByAreaId(electionId: number, areaId: string, observe?: 'body', reportProgress?: boolean): Observable<Community>;
    public communityByAreaId(electionId: number, areaId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Community>>;
    public communityByAreaId(electionId: number, areaId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Community>>;
    public communityByAreaId(electionId: number, areaId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionId === null || electionId === undefined) {
            throw new Error('Required parameter electionId was null or undefined when calling communityByAreaId.');
        }
        if (areaId === null || areaId === undefined) {
            throw new Error('Required parameter areaId was null or undefined when calling communityByAreaId.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionId !== undefined) {
            queryParameters = queryParameters.set('electionId', <any>electionId);
        }
        if (areaId !== undefined) {
            queryParameters = queryParameters.set('areaId', <any>areaId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Community>(`${this.basePath}/area/community/areaId`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public constituency(id: number, observe?: 'body', reportProgress?: boolean): Observable<Constituency>;
    public constituency(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Constituency>>;
    public constituency(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Constituency>>;
    public constituency(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling constituency.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Constituency>(`${this.basePath}/area/constituency`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionId 
     * @param areaId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public constituencyByAreaId(electionId: number, areaId: string, observe?: 'body', reportProgress?: boolean): Observable<Constituency>;
    public constituencyByAreaId(electionId: number, areaId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Constituency>>;
    public constituencyByAreaId(electionId: number, areaId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Constituency>>;
    public constituencyByAreaId(electionId: number, areaId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionId === null || electionId === undefined) {
            throw new Error('Required parameter electionId was null or undefined when calling constituencyByAreaId.');
        }
        if (areaId === null || areaId === undefined) {
            throw new Error('Required parameter areaId was null or undefined when calling constituencyByAreaId.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionId !== undefined) {
            queryParameters = queryParameters.set('electionId', <any>electionId);
        }
        if (areaId !== undefined) {
            queryParameters = queryParameters.set('areaId', <any>areaId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Constituency>(`${this.basePath}/area/constituency/areaId`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public district(id: number, observe?: 'body', reportProgress?: boolean): Observable<District>;
    public district(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<District>>;
    public district(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<District>>;
    public district(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling district.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<District>(`${this.basePath}/area/district`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionId 
     * @param areaId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public districtByAreaId(electionId: number, areaId: string, observe?: 'body', reportProgress?: boolean): Observable<District>;
    public districtByAreaId(electionId: number, areaId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<District>>;
    public districtByAreaId(electionId: number, areaId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<District>>;
    public districtByAreaId(electionId: number, areaId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionId === null || electionId === undefined) {
            throw new Error('Required parameter electionId was null or undefined when calling districtByAreaId.');
        }
        if (areaId === null || areaId === undefined) {
            throw new Error('Required parameter areaId was null or undefined when calling districtByAreaId.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionId !== undefined) {
            queryParameters = queryParameters.set('electionId', <any>electionId);
        }
        if (areaId !== undefined) {
            queryParameters = queryParameters.set('areaId', <any>areaId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<District>(`${this.basePath}/area/district/areaId`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public federal(id: number, observe?: 'body', reportProgress?: boolean): Observable<FederalLevel>;
    public federal(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FederalLevel>>;
    public federal(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FederalLevel>>;
    public federal(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling federal.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<FederalLevel>(`${this.basePath}/area/federal`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionId 
     * @param areaId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public federalByAreaId(electionId: number, areaId: string, observe?: 'body', reportProgress?: boolean): Observable<FederalLevel>;
    public federalByAreaId(electionId: number, areaId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FederalLevel>>;
    public federalByAreaId(electionId: number, areaId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FederalLevel>>;
    public federalByAreaId(electionId: number, areaId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionId === null || electionId === undefined) {
            throw new Error('Required parameter electionId was null or undefined when calling federalByAreaId.');
        }
        if (areaId === null || areaId === undefined) {
            throw new Error('Required parameter areaId was null or undefined when calling federalByAreaId.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionId !== undefined) {
            queryParameters = queryParameters.set('electionId', <any>electionId);
        }
        if (areaId !== undefined) {
            queryParameters = queryParameters.set('areaId', <any>areaId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<FederalLevel>(`${this.basePath}/area/federal/areaId`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllCommunities(electionId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Community>>;
    public getAllCommunities(electionId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Community>>>;
    public getAllCommunities(electionId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Community>>>;
    public getAllCommunities(electionId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionId === null || electionId === undefined) {
            throw new Error('Required parameter electionId was null or undefined when calling getAllCommunities.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionId !== undefined) {
            queryParameters = queryParameters.set('electionId', <any>electionId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<Community>>(`${this.basePath}/area/communities`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllConstituencies(electionId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Constituency>>;
    public getAllConstituencies(electionId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Constituency>>>;
    public getAllConstituencies(electionId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Constituency>>>;
    public getAllConstituencies(electionId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionId === null || electionId === undefined) {
            throw new Error('Required parameter electionId was null or undefined when calling getAllConstituencies.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionId !== undefined) {
            queryParameters = queryParameters.set('electionId', <any>electionId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<Constituency>>(`${this.basePath}/area/constituencies`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllDistricts(electionId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<District>>;
    public getAllDistricts(electionId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<District>>>;
    public getAllDistricts(electionId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<District>>>;
    public getAllDistricts(electionId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionId === null || electionId === undefined) {
            throw new Error('Required parameter electionId was null or undefined when calling getAllDistricts.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionId !== undefined) {
            queryParameters = queryParameters.set('electionId', <any>electionId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<District>>(`${this.basePath}/area/districts`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllFederals(electionId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<FederalLevel>>;
    public getAllFederals(electionId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<FederalLevel>>>;
    public getAllFederals(electionId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<FederalLevel>>>;
    public getAllFederals(electionId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionId === null || electionId === undefined) {
            throw new Error('Required parameter electionId was null or undefined when calling getAllFederals.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionId !== undefined) {
            queryParameters = queryParameters.set('electionId', <any>electionId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<FederalLevel>>(`${this.basePath}/area/federals`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllProvinces(electionId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Province>>;
    public getAllProvinces(electionId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Province>>>;
    public getAllProvinces(electionId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Province>>>;
    public getAllProvinces(electionId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionId === null || electionId === undefined) {
            throw new Error('Required parameter electionId was null or undefined when calling getAllProvinces.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionId !== undefined) {
            queryParameters = queryParameters.set('electionId', <any>electionId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<Province>>(`${this.basePath}/area/provinces`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionId 
     * @param districtId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCommunitiesForDistrict(electionId: number, districtId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Community>>;
    public getCommunitiesForDistrict(electionId: number, districtId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Community>>>;
    public getCommunitiesForDistrict(electionId: number, districtId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Community>>>;
    public getCommunitiesForDistrict(electionId: number, districtId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionId === null || electionId === undefined) {
            throw new Error('Required parameter electionId was null or undefined when calling getCommunitiesForDistrict.');
        }
        if (districtId === null || districtId === undefined) {
            throw new Error('Required parameter districtId was null or undefined when calling getCommunitiesForDistrict.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionId !== undefined) {
            queryParameters = queryParameters.set('electionId', <any>electionId);
        }
        if (districtId !== undefined) {
            queryParameters = queryParameters.set('districtId', <any>districtId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<Community>>(`${this.basePath}/area/communities/for/district`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionId 
     * @param provinceId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getConstituenciesForProvince(electionId: number, provinceId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Constituency>>;
    public getConstituenciesForProvince(electionId: number, provinceId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Constituency>>>;
    public getConstituenciesForProvince(electionId: number, provinceId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Constituency>>>;
    public getConstituenciesForProvince(electionId: number, provinceId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionId === null || electionId === undefined) {
            throw new Error('Required parameter electionId was null or undefined when calling getConstituenciesForProvince.');
        }
        if (provinceId === null || provinceId === undefined) {
            throw new Error('Required parameter provinceId was null or undefined when calling getConstituenciesForProvince.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionId !== undefined) {
            queryParameters = queryParameters.set('electionId', <any>electionId);
        }
        if (provinceId !== undefined) {
            queryParameters = queryParameters.set('provinceId', <any>provinceId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<Constituency>>(`${this.basePath}/area/constituencies/for/province`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionId 
     * @param constituencyId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDistrictsForConstituency(electionId: number, constituencyId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<District>>;
    public getDistrictsForConstituency(electionId: number, constituencyId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<District>>>;
    public getDistrictsForConstituency(electionId: number, constituencyId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<District>>>;
    public getDistrictsForConstituency(electionId: number, constituencyId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionId === null || electionId === undefined) {
            throw new Error('Required parameter electionId was null or undefined when calling getDistrictsForConstituency.');
        }
        if (constituencyId === null || constituencyId === undefined) {
            throw new Error('Required parameter constituencyId was null or undefined when calling getDistrictsForConstituency.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionId !== undefined) {
            queryParameters = queryParameters.set('electionId', <any>electionId);
        }
        if (constituencyId !== undefined) {
            queryParameters = queryParameters.set('constituencyId', <any>constituencyId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<District>>(`${this.basePath}/area/districts/for/constituency`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionId 
     * @param federalId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProvincesForFederal(electionId: number, federalId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Province>>;
    public getProvincesForFederal(electionId: number, federalId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Province>>>;
    public getProvincesForFederal(electionId: number, federalId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Province>>>;
    public getProvincesForFederal(electionId: number, federalId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionId === null || electionId === undefined) {
            throw new Error('Required parameter electionId was null or undefined when calling getProvincesForFederal.');
        }
        if (federalId === null || federalId === undefined) {
            throw new Error('Required parameter federalId was null or undefined when calling getProvincesForFederal.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionId !== undefined) {
            queryParameters = queryParameters.set('electionId', <any>electionId);
        }
        if (federalId !== undefined) {
            queryParameters = queryParameters.set('federalId', <any>federalId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<Province>>(`${this.basePath}/area/provinces/for/federal`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public province(id: number, observe?: 'body', reportProgress?: boolean): Observable<Province>;
    public province(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Province>>;
    public province(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Province>>;
    public province(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling province.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Province>(`${this.basePath}/area/province`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionId 
     * @param areaId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public provinceByAreaId(electionId: number, areaId: string, observe?: 'body', reportProgress?: boolean): Observable<Province>;
    public provinceByAreaId(electionId: number, areaId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Province>>;
    public provinceByAreaId(electionId: number, areaId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Province>>;
    public provinceByAreaId(electionId: number, areaId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionId === null || electionId === undefined) {
            throw new Error('Required parameter electionId was null or undefined when calling provinceByAreaId.');
        }
        if (areaId === null || areaId === undefined) {
            throw new Error('Required parameter areaId was null or undefined when calling provinceByAreaId.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionId !== undefined) {
            queryParameters = queryParameters.set('electionId', <any>electionId);
        }
        if (areaId !== undefined) {
            queryParameters = queryParameters.set('areaId', <any>areaId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Province>(`${this.basePath}/area/province/areaId`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionId 
     * @param searchTerm 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchCommunity(electionId: number, searchTerm: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Community>>;
    public searchCommunity(electionId: number, searchTerm: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Community>>>;
    public searchCommunity(electionId: number, searchTerm: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Community>>>;
    public searchCommunity(electionId: number, searchTerm: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionId === null || electionId === undefined) {
            throw new Error('Required parameter electionId was null or undefined when calling searchCommunity.');
        }
        if (searchTerm === null || searchTerm === undefined) {
            throw new Error('Required parameter searchTerm was null or undefined when calling searchCommunity.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionId !== undefined) {
            queryParameters = queryParameters.set('electionId', <any>electionId);
        }
        if (searchTerm !== undefined) {
            queryParameters = queryParameters.set('searchTerm', <any>searchTerm);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<Community>>(`${this.basePath}/area/search/community`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionId 
     * @param searchTerm 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchConstituency(electionId: number, searchTerm: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Constituency>>;
    public searchConstituency(electionId: number, searchTerm: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Constituency>>>;
    public searchConstituency(electionId: number, searchTerm: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Constituency>>>;
    public searchConstituency(electionId: number, searchTerm: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionId === null || electionId === undefined) {
            throw new Error('Required parameter electionId was null or undefined when calling searchConstituency.');
        }
        if (searchTerm === null || searchTerm === undefined) {
            throw new Error('Required parameter searchTerm was null or undefined when calling searchConstituency.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionId !== undefined) {
            queryParameters = queryParameters.set('electionId', <any>electionId);
        }
        if (searchTerm !== undefined) {
            queryParameters = queryParameters.set('searchTerm', <any>searchTerm);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<Constituency>>(`${this.basePath}/area/search/constituency`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionId 
     * @param searchTerm 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchDistrict(electionId: number, searchTerm: string, observe?: 'body', reportProgress?: boolean): Observable<Array<District>>;
    public searchDistrict(electionId: number, searchTerm: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<District>>>;
    public searchDistrict(electionId: number, searchTerm: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<District>>>;
    public searchDistrict(electionId: number, searchTerm: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionId === null || electionId === undefined) {
            throw new Error('Required parameter electionId was null or undefined when calling searchDistrict.');
        }
        if (searchTerm === null || searchTerm === undefined) {
            throw new Error('Required parameter searchTerm was null or undefined when calling searchDistrict.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionId !== undefined) {
            queryParameters = queryParameters.set('electionId', <any>electionId);
        }
        if (searchTerm !== undefined) {
            queryParameters = queryParameters.set('searchTerm', <any>searchTerm);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<District>>(`${this.basePath}/area/search/district`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionId 
     * @param searchTerm 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchFederal(electionId: number, searchTerm: string, observe?: 'body', reportProgress?: boolean): Observable<Array<FederalLevel>>;
    public searchFederal(electionId: number, searchTerm: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<FederalLevel>>>;
    public searchFederal(electionId: number, searchTerm: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<FederalLevel>>>;
    public searchFederal(electionId: number, searchTerm: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionId === null || electionId === undefined) {
            throw new Error('Required parameter electionId was null or undefined when calling searchFederal.');
        }
        if (searchTerm === null || searchTerm === undefined) {
            throw new Error('Required parameter searchTerm was null or undefined when calling searchFederal.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionId !== undefined) {
            queryParameters = queryParameters.set('electionId', <any>electionId);
        }
        if (searchTerm !== undefined) {
            queryParameters = queryParameters.set('searchTerm', <any>searchTerm);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<FederalLevel>>(`${this.basePath}/area/search/federal`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param electionId 
     * @param searchTerm 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchProvince(electionId: number, searchTerm: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Province>>;
    public searchProvince(electionId: number, searchTerm: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Province>>>;
    public searchProvince(electionId: number, searchTerm: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Province>>>;
    public searchProvince(electionId: number, searchTerm: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (electionId === null || electionId === undefined) {
            throw new Error('Required parameter electionId was null or undefined when calling searchProvince.');
        }
        if (searchTerm === null || searchTerm === undefined) {
            throw new Error('Required parameter searchTerm was null or undefined when calling searchProvince.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (electionId !== undefined) {
            queryParameters = queryParameters.set('electionId', <any>electionId);
        }
        if (searchTerm !== undefined) {
            queryParameters = queryParameters.set('searchTerm', <any>searchTerm);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<Province>>(`${this.basePath}/area/search/province`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
